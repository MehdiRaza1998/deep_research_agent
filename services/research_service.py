import asyncio
from datetime import datetime
from pathlib import Path
from agents import Runner, InputGuardrailTripwireTriggered, SQLiteSession
from models import UserPreference
from config import MAX_QUESTIONS, RESEARCHES_DIR
from .system_monitor import SystemMonitor

class ResearchService:
    """Service for handling research workflows and agent interactions"""
    
    def __init__(self):
        self.system_monitor = SystemMonitor()
    
    async def gather_requirements(self, requirements_agent):
        """Gather research requirements from the user"""
        print("\nCALLING AGENT ASYNC\n")
        session = SQLiteSession(session_id="requirements_gathering")
        idea_given = input("Idea: ").strip()
        
        try:
            result = await Runner.run(requirements_agent, idea_given, session=session)
            question_count = 0
            
            while True:
                print(f"\nQuestion {result.final_output.question_number}: {result.final_output.question}")
                question_count = result.final_output.question_number
                
                # Check if max questions reached or requirements confirmed
                if result.final_output.max_questions_reached or result.final_output.requirements_confirmed:
                    if result.final_output.requirements_summary:
                        print(f"\nRequirements Summary: {result.final_output.requirements_summary}")
                    print("\nRequirements gathering completed!")
                    break
                    
                user_response = input("Your response: ").strip()
                if not user_response:
                    break
                    
                # Pass the current question count to the agent
                context = f"Current question number: {question_count}. User response: {user_response}"
                result = await Runner.run(requirements_agent, context, session=session)
                
                # Additional safety check for max questions
                if question_count > MAX_QUESTIONS:
                    print(f"\nMaximum number of questions ({MAX_QUESTIONS}) reached. Ending requirements gathering.")
                    break
                    
            print("\nFinal result:", result.final_output) 
            research_requirements = result.final_output.requirements_summary
            return research_requirements
            
        except InputGuardrailTripwireTriggered as e:
            print("Guardrail triggered")
            return None
        except Exception as e:
            print(f"❌ Error: {e}")
            return None
    
    async def execute_research_plan(self, planner_agent, research_requirements, user_preferences):
        """Execute the research plan using the planner agent"""
        print("\nCALLING AGENT ASYNC\n")
        session = SQLiteSession(session_id="planner")
        print("Research requirements: ", research_requirements)
        print("-Research planner started-")
        
        result = await Runner.run(
            planner_agent, 
            research_requirements, 
            session=session, 
            max_turns=20, 
            context=user_preferences, 
            hooks=self.system_monitor
        )
        
        print("\nFinal result:", result.final_output) 
        
        # Save the research output as a markdown file
        await self.save_research_to_markdown(result.final_output, research_requirements)
        
        return result.final_output
    
    async def save_research_to_markdown(self, final_output, research_requirements):
        """Save the research output as a formatted markdown file"""
        
        # Create researches folder if it doesn't exist
        researches_dir = Path(RESEARCHES_DIR)
        researches_dir.mkdir(exist_ok=True)
        
        # Generate timestamped filename
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"research_{timestamp}.md"
        filepath = researches_dir / filename
        
        # Create formatted markdown content
        markdown_content = f"""# Business Research Report

**Generated:** {datetime.now().strftime("%B %d, %Y at %I:%M %p")}  
**Research Topic:** {research_requirements}

---

## Executive Summary

{final_output}

---

*This report was generated by the Deep Research AI system using comprehensive web research, market analysis, and competitive intelligence.*

"""
        
        # Write to file
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            print(f"\n✅ Research saved to: {filepath}")
        except Exception as e:
            print(f"\n❌ Error saving research file: {e}")
